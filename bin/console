#!/usr/bin/env ruby

require "bundler/setup"
require "linked_payload"
require "pry"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

class Horse
  include LinkedPayload
  attr_reader :name, :age, :children

  def initialize(name, age, children)
    @name = name
    @age = age
    @children = children
  end

  field :name, String, -> { name }
  field :age, Numeric, -> { age }
  field :children, array(Horse), -> { children }

  links do
    link 'self', "/horses/#{name}"
  end
end

class HorseCollection
  include LinkedPayload
  attr_reader :person, :horses

  def initialize(person, horses)
    @person = person
    @horses = horses
  end

  field :horses, array(Horse), -> { horses }

  links do
    link 'self', "/person/#{person.name}/horses" if person.kind == 'owner'
  end
end

class Person
  include LinkedPayload
  attr_reader :name, :age, :kind, :horses

  def initialize(name, age, kind, horses)
    @name = name
    @age = age
    @kind = kind
    @horses = horses
  end

  field :name, String, -> { name }
  field :age, Numeric, -> { age }
  field :kind, is("owner", "jockey"), -> { kind }
  field :horses, HorseCollection, -> { HorseCollection.new(self, horses) }

  links do
    link 'self', "/users/#{name}"
  end
end

def dave
  Horse.new("Dave", 1, [])
end

def rigby
  Horse.new("Rigby", 2, [])
end

def ruby
  Horse.new("Ruby", 6, [dave, rigby])
end

def bad_horse
  Horse.new("bad horse", 4, [bob])
end

def bob
  Person.new("Bob", 70, "owner", [dave, rigby, ruby])
end

def jockey
  Person.new("Jack", 23, "jockey", [dave, ruby])
end

def bab
  Person.new("Bab", "bad", "owner", [dave, rigby, ruby])
end

def bab2
  Person.new("Bob", 70, "owner", [dave, rigby, bad_horse])
end

Pry.start
